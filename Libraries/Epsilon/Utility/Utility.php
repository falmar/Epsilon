<?php
/**
 * Project: Epsilon
 * Date: 6/21/15
 * Time: 11:54 AM
 *
 * @link      https://github.com/falmar/Epsilon
 * @author    David Lavieri (falmar) <daviddlavier@gmail.com>
 * @copyright 2015 David Lavieri
 * @license   http://opensource.org/licenses/MIT The MIT License (MIT)
 */

namespace Epsilon\Utility;

defined("EPSILON_EXEC") or die();

use App\Config;
use Epsilon\Factory;
use Epsilon\IO\Input;
use Epsilon\Object\Object;
use PDO;
use PDOException;

/**
 * Class Utility
 *
 * @package Epsilon\Utility
 */
class Utility
{

    /**
     * @param $Path
     * @return string
     */
    public static function getRelativePath($Path)
    {
        $URI    = Factory::getURI();
        $Filter = array_filter(explode("/", EPSILON_PATH));

        $nPath = array_pop($Filter);

        return $URI->getRelativePath() . substr($Path, strpos($Path, $nPath) + strlen($nPath) + 1, strlen($Path));

    }

    /**
     * @param PDO  $objPDO
     * @param      $fieldID
     * @param      $tableName
     * @param      $parentID
     * @param      $left
     * @param null $OrderBY
     * @return bool|int
     */
    public static function rebuildNest($objPDO, $fieldID, $tableName, $parentID, $left, $OrderBY = null)
    {

        if (is_null($parentID)) {
            $stmt = $objPDO->prepare("SELECT $fieldID FROM $tableName WHERE ParentID IS NULL ORDER BY ParentID $OrderBY");
        } else {
            $stmt = $objPDO->prepare("SELECT $fieldID FROM $tableName WHERE ParentID = :ParentID ORDER BY ParentID $OrderBY");
            $stmt->bindValue(":ParentID", $parentID, PDO::PARAM_STR);
        }

        $right = (int)$left + 1;

        try {
            $stmt->execute();

            foreach ($stmt->fetchAll(PDO::FETCH_OBJ) as $child) {
                $right = self::rebuildNest($objPDO, $fieldID, $tableName, $child->$fieldID, $right, $OrderBY);
                if ($right === false) {
                    return false;
                }
            }

            if (is_null($parentID)) {
                $stmt = $objPDO->prepare("UPDATE $tableName SET lft = $left,rgt = $right WHERE $fieldID IS NULL");
            } else {
                $stmt = $objPDO->prepare("UPDATE $tableName SET lft = $left,rgt = $right WHERE $fieldID = :ParentID");
                $stmt->bindValue(":ParentID", $parentID, PDO::PARAM_STR);
            }

            $stmt->execute();

        } catch (PDOException $e) {
            return false;
        }

        return $right + 1;

    }

    /**
     * @param string $Date
     * @param bool   $Time
     * @return null|string
     */
    public static function getDateForDB($Date = "NOW()", $Time = true)
    {
        if (is_null($Date) or $Date == "") {
            return null;
        }

        if ($Date == "NOW()") {
            if ($Time) {
                $Date = date("Y-m-d H:i:s");
            } else {
                $Date = date("Y-m-d");
            }
        } else {
            if (strpos($Date, "-") === false) {
                $Date = explode("/", $Date);
            } else {
                $Date = explode("-", $Date);
            }
        }

        if (is_array($Date) && count($Date) == 3) {
            $Date = $Date[2] . "-" . $Date[1] . "-" . $Date[0];
        }

        return $Date;
    }

    /**
     * @param      $Results
     * @param      $ElementID
     * @param null $MaxPageSize
     * @return \Epsilon\Object\Object
     */
    public static function foundationListPaging($Results, $ElementID, $MaxPageSize = null)
    {
        $CurrentPage = Input::getVar("CurrentPage", "REQUEST");

        if (is_integer($MaxPageSize)) {
            $PageSize = $MaxPageSize;
        } else {
            $PageSize = Config::MAX_PAGE_SIZE;
        }

        $Paging = new Object([
            'HTML'         => null,
            'Init'         => 0,
            'Max'          => $PageSize,
            'Results'      => 0,
            'PageInit'     => 0,
            'PageMax'      => 0,
            'TotalPages'   => 0,
            'TotalResults' => 0
        ]);

        if (is_array($Results)) {
            $TotalResults = count($Results);
        } else {
            if (is_numeric($Results)) {
                $TotalResults = $Results;
            } else {
                $TotalResults = 0;
            }
        }

        if ($TotalResults > 0) {


            $TotalPages = self::getTotalPages($TotalResults, $PageSize);

            if ($CurrentPage > $TotalPages) {
                $CurrentPage = $TotalPages;
            } elseif (!is_numeric($CurrentPage) || !((int)$CurrentPage > 0) || ((int)$CurrentPage) == 0) {
                $CurrentPage = 1;
            }

            if ($CurrentPage > 1) {
                $Init     = ($CurrentPage - 1) * $PageSize;
                $Max      = $PageSize;
                $PageInit = ($CurrentPage - 1) * ($PageSize) + 1;
                $PageMax  = ($PageInit + $PageSize - 1);
            } else {
                $Init     = 0;
                $Max      = $PageSize;
                $PageInit = 1;
                $PageMax  = ($PageInit + $Max) - 1;
            }

            if ($PageMax >= $TotalResults) {
                $PageMax = $TotalResults;
            }

            $Pages = self::getPages($CurrentPage, $TotalPages);

            $HTML = "";

            $PreviousSet = false;

            if (is_string($ElementID)) {
                $ElementID = "\"$ElementID\"";
            } else {
                $ElementID = "null";
            }

            $eLanguage = Factory::getLanguage();

            $PagesCount = 0;

            foreach ($Pages as $p) {

                $PagesCount++;

                if (!$PreviousSet) {
                    $Previus = $CurrentPage - 1;
                    if ($CurrentPage != 1) {
                        $HTML .= "<ul class=\"pagination text-center\" role=\"navigation\" aria-label=\"Pagination\">\n<li class=\"pagination-previous\"><a href='javascript:goToPage($Previus, $ElementID)'><span class=\"show-for-sr\">page</span> " . $eLanguage->_("LIST-RESULT-PREVIOUS") . "</a></li>\n";
                    } else {
                        $HTML .= "<ul class=\"pagination text-center\" role=\"navigation\" aria-label=\"Pagination\">\n<li class=\"pagination-previous disabled\"><span class=\"show-for-sr\">page</span> " . $eLanguage->_("LIST-RESULT-PREVIOUS") . "</li>\n";
                    }
                    $PreviousSet = true;
                }

                if ($CurrentPage == $p) {
                    $HTML .= "<li class='current'><span class=\"show-for-sr\">You're on page </span > $p</li > \n";
                } else {
                    $HTML .= " <li><a href = 'javascript:goToPage($p,$ElementID)' > $p</a ></li > \n";
                }

                if ($PagesCount == count($Pages)) {
                    $Next = $CurrentPage + 1;
                    if ($CurrentPage != $p) {
                        $HTML .= "<li class=\"pagination-next\"><a aria-label=\"Next page\" href='javascript:goToPage($Next,$ElementID)'>" . $eLanguage->_("LIST-RESULT-NEXT") . " <span class=\"show-for-sr\">page</span></a></li></ul>";
                    } else {
                        $HTML .= "<li class=\"pagination-next disabled\"><span class=\"show-for-sr\">page</span>" . $eLanguage->_("LIST-RESULT-NEXT") . "</li>\n</ul>";
                    }
                }

            }

            $Paging->setProperties([
                'HTML'         => $HTML,
                'Init'         => $Init,
                'Max'          => $Max,
                'Results'      => ($PageMax - $PageInit) + 1,
                'PageInit'     => $PageInit,
                'PageMax'      => $PageMax,
                'TotalPages'   => $TotalPages,
                'TotalResults' => $TotalResults
            ]);

        }

        return $Paging;
    }

    /**
     * @param $CurrentPage
     * @param $TotalPages
     * @return array
     */
    protected static function getPages($CurrentPage, $TotalPages)
    {
        if ($TotalPages > 0) {
            if (($CurrentPage - 3) > 0 && ($CurrentPage + 3) <= $TotalPages) {
                $Pages = range($CurrentPage - 3, $CurrentPage + 3);
            } else {
                if ($TotalPages > 7) {
                    if ($CurrentPage - 3 <= 0) {
                        $Pages = range(1, 7);
                    } else {
                        $Pages = range($TotalPages - 6, $TotalPages);
                    }
                } else {
                    $Pages = range(1, $TotalPages);
                }
            }
        } else {
            $Pages = [];
        }

        return $Pages;
    }

    /**
     * @param $TotalResults
     * @param $PageSize
     * @return float|int
     */
    protected static function getTotalPages($TotalResults, $PageSize)
    {
        if ($TotalResults > 0) {
            if ($TotalResults < $PageSize) {
                $TotalPages = 1;
            } elseif (($TotalResults % $PageSize) > 0) {
                $TotalPages = floor($TotalResults / $PageSize) + 1;
            } else {
                $TotalPages = $TotalResults / $PageSize;
            }
        } else {
            $TotalPages = 0;
        }

        return $TotalPages;
    }

    /**
     * @param            $String
     * @param bool|false $HTML_Decode
     * @param string     $Prefix
     * @param string     $Postfix
     * @return string
     */
    public static function getSlug($String, $HTML_Decode = false, $Prefix = '', $Postfix = '')
    {
        return implode('-', preg_split('/\s+/', strtolower($Prefix . self::transliterateString($String, $HTML_Decode) . $Postfix)));
    }

    /**
     * @author Edgar Zag√≥rski
     * @param string $txt
     * @param bool   $html_decode
     * @return mixed
     */

    public static function transliterateString($txt, $html_decode = false)
    {
        //@formatter:off
        if ($html_decode) {
            $txt = html_entity_decode($txt, ENT_QUOTES, "UTF-8");
        }
        $transliterationTable = ["#" => "lel", '&' => '', '√°' => 'a', '√Å' => 'A', '√†' => 'a', '√Ä' => 'A', 'ƒÉ' => 'a', 'ƒÇ' => 'A', '√¢' => 'a', '√Ç' => 'A', '√•' => 'a', '√Ö' => 'A', '√£' => 'a', '√É' => 'A', 'ƒÖ' => 'a', 'ƒÑ' => 'A', 'ƒÅ' => 'a', 'ƒÄ' => 'A', '√§' => 'ae', '√Ñ' => 'AE', '√¶' => 'ae', '√Ü' => 'AE', '·∏É' => 'b', '·∏Ç' => 'B', 'ƒá' => 'c', 'ƒÜ' => 'C', 'ƒâ' => 'c', 'ƒà' => 'C', 'ƒç' => 'c', 'ƒå' => 'C', 'ƒã' => 'c', 'ƒä' => 'C', '√ß' => 'c', '√á' => 'C', 'ƒè' => 'd', 'ƒé' => 'D', '·∏ã' => 'd', '·∏ä' => 'D', 'ƒë' => 'd', 'ƒê' => 'D', '√∞' => 'dh', '√ê' => 'Dh', '√©' => 'e', '√â' => 'E', '√®' => 'e', '√à' => 'E', 'ƒï' => 'e', 'ƒî' => 'E', '√™' => 'e', '√ä' => 'E', 'ƒõ' => 'e', 'ƒö' => 'E', '√´' => 'e', '√ã' => 'E', 'ƒó' => 'e', 'ƒñ' => 'E', 'ƒô' => 'e', 'ƒò' => 'E', 'ƒì' => 'e', 'ƒí' => 'E', '·∏ü' => 'f', '·∏û' => 'F', '∆í' => 'f', '∆ë' => 'F', 'ƒü' => 'g', 'ƒû' => 'G', 'ƒù' => 'g', 'ƒú' => 'G', 'ƒ°' => 'g', 'ƒ†' => 'G', 'ƒ£' => 'g', 'ƒ¢' => 'G', 'ƒ•' => 'h', 'ƒ§' => 'H', 'ƒß' => 'h', 'ƒ¶' => 'H', '√≠' => 'i', '√ç' => 'I', '√¨' => 'i', '√å' => 'I', '√Æ' => 'i', '√é' => 'I', '√Ø' => 'i', '√è' => 'I', 'ƒ©' => 'i', 'ƒ®' => 'I', 'ƒØ' => 'i', 'ƒÆ' => 'I', 'ƒ´' => 'i', 'ƒ™' => 'I', 'ƒµ' => 'j', 'ƒ¥' => 'J', 'ƒ∑' => 'k', 'ƒ∂' => 'K', 'ƒ∫' => 'l', 'ƒπ' => 'L', 'ƒæ' => 'l', 'ƒΩ' => 'L', 'ƒº' => 'l', 'ƒª' => 'L', '≈Ç' => 'l', '≈Å' => 'L', '·πÅ' => 'm', '·πÄ' => 'M', '≈Ñ' => 'n', '≈É' => 'N', '≈à' => 'n', '≈á' => 'N', '√±' => 'n', '√ë' => 'N', '≈Ü' => 'n', '≈Ö' => 'N', '√≥' => 'o', '√ì' => 'O', '√≤' => 'o', '√í' => 'O', '√¥' => 'o', '√î' => 'O', '≈ë' => 'o', '≈ê' => 'O', '√µ' => 'o', '√ï' => 'O', '√∏' => 'oe', '√ò' => 'OE', '≈ç' => 'o', '≈å' => 'O', '∆°' => 'o', '∆†' => 'O', '√∂' => 'oe', '√ñ' => 'OE', '·πó' => 'p', '·πñ' => 'P', '≈ï' => 'r', '≈î' => 'R', '≈ô' => 'r', '≈ò' => 'R', '≈ó' => 'r', '≈ñ' => 'R', '≈õ' => 's', '≈ö' => 'S', '≈ù' => 's', '≈ú' => 'S', '≈°' => 's', '≈†' => 'S', '·π°' => 's', '·π†' => 'S', '≈ü' => 's', '≈û' => 'S', '»ô' => 's', '»ò' => 'S', '√ü' => 'SS', '≈•' => 't', '≈§' => 'T', '·π´' => 't', '·π™' => 'T', '≈£' => 't', '≈¢' => 'T', '»õ' => 't', '»ö' => 'T', '≈ß' => 't', '≈¶' => 'T', '√∫' => 'u', '√ö' => 'U', '√π' => 'u', '√ô' => 'U', '≈≠' => 'u', '≈¨' => 'U', '√ª' => 'u', '√õ' => 'U', '≈Ø' => 'u', '≈Æ' => 'U', '≈±' => 'u', '≈∞' => 'U', '≈©' => 'u', '≈®' => 'U', '≈≥' => 'u', '≈≤' => 'U', '≈´' => 'u', '≈™' => 'U', '∆∞' => 'u', '∆Ø' => 'U', '√º' => 'ue', '√ú' => 'UE', '·∫É' => 'w', '·∫Ç' => 'W', '·∫Å' => 'w', '·∫Ä' => 'W', '≈µ' => 'w', '≈¥' => 'W', '·∫Ö' => 'w', '·∫Ñ' => 'W', '√Ω' => 'y', '√ù' => 'Y', '·ª≥' => 'y', '·ª≤' => 'Y', '≈∑' => 'y', '≈∂' => 'Y', '√ø' => 'y', '≈∏' => 'Y', '≈∫' => 'z', '≈π' => 'Z', '≈æ' => 'z', '≈Ω' => 'Z', '≈º' => 'z', '≈ª' => 'Z', '√æ' => 'th', '√û' => 'Th', '¬µ' => 'u', '–∞' => 'a', '–ê' => 'a', '–±' => 'b', '–ë' => 'b', '–≤' => 'v', '–í' => 'v', '–≥' => 'g', '–ì' => 'g', '–¥' => 'd', '–î' => 'd', '–µ' => 'e', '–ï' => 'E', '—ë' => 'e', '–Å' => 'E', '–∂' => 'zh', '–ñ' => 'zh', '–∑' => 'z', '–ó' => 'z', '–∏' => 'i', '–ò' => 'i', '–π' => 'j', '–ô' => 'j', '–∫' => 'k', '–ö' => 'k', '–ª' => 'l', '–õ' => 'l', '–º' => 'm', '–ú' => 'm', '–Ω' => 'n', '–ù' => 'n', '–æ' => 'o', '–û' => 'o', '–ø' => 'p', '–ü' => 'p', '—Ä' => 'r', '–†' => 'r', '—Å' => 's', '–°' => 's', '—Ç' => 't', '–¢' => 't', '—É' => 'u', '–£' => 'u', '—Ñ' => 'f', '–§' => 'f', '—Ö' => 'h', '–•' => 'h', '—Ü' => 'c', '–¶' => 'c', '—á' => 'ch', '–ß' => 'ch', '—à' => 'sh', '–®' => 'sh', '—â' => 'sch', '–©' => 'sch', '—ä' => '', '–™' => '', '—ã' => 'y', '–´' => 'y', '—å' => '', '–¨' => '', '—ç' => 'e', '–≠' => 'e', '—é' => 'ju', '–Æ' => 'ju', '—è' => 'ja', '–Ø' => 'ja'];

        return preg_replace('/[^A-Za-z0-9_\@\.\s\-\√±\√°\√≥\√©\√∫\√≠]/', '', str_replace(array_keys($transliterationTable), array_values($transliterationTable), $txt));
        //@formatter:on
    }

}
